version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: awr_postgres
    environment:
      POSTGRES_DB: awrdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - awr_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: awr_redis
    ports:
      - "6379:6379"
    networks:
      - awr_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: awr_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/awrdb
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DEBUG=False
      - LOG_LEVEL=INFO
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - awr_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: awr_celery_worker
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/awrdb
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - LOG_LEVEL=INFO
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/app:/app/app
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - awr_network
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: awr_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - awr_network

volumes:
  postgres_data:

networks:
  awr_network:
    driver: bridge
